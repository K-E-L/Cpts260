.text
lui $t0, 0xFFFF				# turn on transmitter control bit at very beginning
sw $0x0001, 8($t0)
sw $0x0002, ($t0)			# enables interrupts

la $t4, list				# puts address of list in $t4
li $t5, 0				# count

doesNothing:
	lw $t0, 0xffff0000
	andi $t0, $t0, 0x00000001
	beqz $t0, doesNothing
	bnez $t0, PORTAL

PORTAL:
	sw $a0, _k_save_a0
	sw $t4, _k_save_t4
	sw $t5, _k_save_t5
	sw $t2, _k_save_t2
	sw $v0, _k_save_v0
	sw $t1, _k_save_t1
	sw $t6, _k_save_t6
	
	la $t9, getIn
	jalr $t9
	li $v0, 10
	syscall

PORTAL1:
	lw $a0, _k_save_a0
	lw $t4, _k_save_t4
	lw $t5, _k_save_t5
	lw $t2, _k_save_t2
	lw $v0, _k_save_v0
	lw $t1, _k_save_t1
	lw $t6, _k_save_t6

# Polling code for writing
lui $t0, 0xFFFF
li $t3, 0
la $t4, list
LOOP1:
	lw $t1, 8($t0)			# $t1 = content of transmitter control
	andi $t2, $t1, 0x0001		
	beq $t2, $zero, LOOP1		# $t2 = 0....00? (? = ready bit) ready bit == 1
	lw $a0, 0($t4)
	sw $a0, 12($t0)			# store 'a' to the transmitter data
	addi $t4, $t4, 4		# increment address of list by 4
	addi $t3, $t3, 1		# ++count;
	beq $t3, 4, EXIT1		# checks to see if count == 4
	j LOOP1				# ready bit == 0
EXIT1:
# cout Z

lui $t0, 0xFFFF
li $t3, 0
LOOP2:
	lw $t1, 8($t0)	
	andi $t2, $t1, 0x0001		
	beq $t2, $zero, LOOP2
	lw $a0, 0($t4)
	sw $t6, 12($t0)
	addi $t3, $t3, 1	
	move $t6, $t5
	beq $t3, 2, EXIT2
	j LOOP2
EXIT2:

.data
asciiZero: .byte '0'
exp: .space 30
char: .byte 'a'
list: .word 0, 0, 0, 0

.ktext 0x80000180
char2num:
	lb $t0, asciiZero
	subu $v0, $a0, $t0
	jr $ra

num2char:
	lb $t0 asciiZero
	addu $v0, $a0, $t0
	jr $ra

getIn:
	lw $a0, _k_save_a0
	lw $t4, _k_save_t4
	lw $t5, _k_save_t5
	lw $t2, _k_save_t2
	lw $v0, _k_save_v0
	lw $t1, _k_save_t1
	lw $t6, _k_save_t6
	
RETRIEVE:
	lbu $a0, 0xffff0004		# Read in a character from keyboard to low byte of 
					# $a0 and clear out other 3 bytes of $a0

STORE:
	sw $a0, 0($t4)
	addi $t4, $t4, 4
	addi $t5, $t5, 1
	beq $t5, 4, EVALUATE			# getOut == Evaluate 
	sw $zero, 0xffff0000

backToFront:					# j doesNothing
	sw $a0, _k_save_a0
	sw $t4, _k_save_t4
	sw $t5, _k_save_t5
	sw $t2, _k_save_t2
	sw $v0, _k_save_v0
	sw $t1, _k_save_t1
	sw $t6, _k_save_t6

	la $t9, doesNothing
	jalr $t9
	li $v0, 10
	syscall

EVALUATE:
# 	- if the current buffer content is "3+9="
# 	- then you need return value 12
	la $t4, list
	lw $a0, 0($t4)
	jal char2num
	move $t2, $v0				# $t0 holds X
	lw $a0, 8($t4)
	jal char2num
	move $t1, $v0				# $t1 holds Y
	add $t5, $t2, $t1			# $t5 holds Z

# checks for double digit answer
LOOP3:
	blt $t5, 10, EXIT3
	addi $t5, $t5, -10			# $t5 is now the one's place
	addi $t6, $t6, 1			# $t6 is now the ten's place
	j LOOP3
EXIT3:
	move $a0, $t5
	jal num2char
	move $t5, $v0
	move $a0, $t6
	jal num2char
	move $t6, $v0

getOut:
	sw $a0, _k_save_a0
	sw $t4, _k_save_t4
	sw $t5, _k_save_t5
	sw $t2, _k_save_t2
	sw $v0, _k_save_v0
	sw $t1, _k_save_t1
	sw $t6, _k_save_t6
	
	la $t9, PORTAL1
	jalr $t9
	li $v0, 10
	syscall

.kdata 
_k_save_a0: .word 0
_k_save_t4: .word 0
_k_save_t5: .word 0
_k_save_t2: .word 0
_k_save_v0: .word 0
_k_save_t1: .word 0
_k_save_t6: .word 0
_k_save_at: .word 0			
