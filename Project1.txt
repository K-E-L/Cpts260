.data
array: .space 400

.text
Read:			# n--->$s0, i--->$t0, addr of Arr--->$s1, temp addr of Arr--->$t0
li $v0, 5		
syscall
move $s0, $v0		# set $s0 to n
move $s6, $v0
la $s1, array		# set addr of Arr to #S1
move $t1, $s1
LOOP:
bge $t0, $s0, EXIT
li $v0, 5		# set integer from keyboard
syscall
sw $v0, 0($t1)		# put integer in array
addi $t0, $t0, 1	# add i by 1
addi $t1, $t1, 4	# add addr by 4
j LOOP	
EXIT:	
li $a0, 0		# setup quick_sort
addi $s0, $s0, -1
move $a1, $s0	
addiu $sp, $sp, -4	#store $ra
sw $ra, 0($sp)
jal Quick_sort	
lw $ra, 0($sp)
addiu $sp, $sp, 4
li $t0, 0		# setup the loop
addi $s0, $s0, 1	
move $t1, $s1	
LOOP1:	
bge $t0, $s6, EXIT1	# print array
li $v0, 1		
lw $a0, 0($t1)	
syscall	
addi $t0, $t0, 1	
addi $t1, $t1, 4	
j LOOP1	
EXIT1:
jr $ra


Quick_sort:		#f--->$a0, l--->$a1, j--->$t0, old l--->$t1
bge $a0, $a1, EXIT6
addiu $sp, $sp, -4	
sw $ra, 0($sp)		# save $ra
jal Partition	
lw $ra, 0($sp)
addiu $sp, $sp, 4
move $t0, $v0		# J = partition (f, l)
move $t1, $a1	
move $a1, $t0	
addiu $sp, $sp, -12	# setup 1st quick_sort
sw $a0, 0($sp)	
sw $a1, 4($sp)	
sw $ra, 8($sp)	
jal Quick_sort	
addi $t0, $t0, 1	# setup 2nd quick_sort
move $a0, $t0	
move $a1, $t1	
jal Quick_sort	
lw $ra, 8($sp)		# recover
lw $a1, 4($sp)	
lw $a0, 0($sp)
addiu $sp, $sp, 12
EXIT6:
jr $ra


Partition:		# f--->$a0, l--->$a1, temp f--->$t3, temp l--->$t4, pivot--->$t0, i--->$t1, j--->$t2, bool true--->$t5, A[j]--->$t6, temp--->$t7
la $s1, array
move $t3, $a0		# a[f]
mul $t3, $t3, 4	
add $t3, $t3, $s1	
lw $t0, 0($t3)		# pivot = a[f]
addi $t1, $a0, -1	# i = f - l	
addi $t2, $a1, 1	# j = l + 1
li $t5, 1	
LOOP2:	
beq $t5, $zero, EXIT2	# while true
addi $t2, $t2, -1	# j--
LOOP3:			
mul $t2, $t2, 4	
add $t2, $t2, $s1	
lw $t6, 0($t2)	
move $t7, $s1	
mul $t7, $t7, -1	
add $t2, $t2, $t7	
div $t2, $t2, 4
ble $t6, $t0, EXIT3	# while (a[j] > pivot)
add $t2, $t2, -1	# j--
j LOOP3
EXIT3:	
addi $t1, $t1, 1	# i++
LOOP4:	
mul $t1, $t1, 4
add $t1, $t1, $s1
lw $t6, 0($t1)	
move $t7, $s1	
mul $t7, $t7, -1	
add $t1, $t1, $t7	
div $t1, $t1, 4
bge $t6, $t0, EXIT4	# while (a[i] < pivot)
addi $t1, $t1, 1	# i++
j LOOP4
EXIT4:	
bge $t1, $t2, ELSE	# if ( i < j)
move $a0, $t1
move $a1, $t2
addiu $sp, $sp, -4	
sw $ra, 0($sp)		# save $ra
jal Swap		# swap ( i, j)	
j EXIT5	
ELSE:
move $v0, $t2		# return j
li $t5, 0		
EXIT5:	
j LOOP2
EXIT2:
lw $ra, 0($sp)
addiu $sp, $sp, 4
jr $ra


Swap:			# i--->$a0, j--->$a1, tmp--->$t0, addr or Arr--->$s1, temp i--->$t1, temp j--->$t2
la $s1, array
move $s3, $a0
mul $s3, $s3, 4
add $s3, $s3, $s1	# A[i]
move $s4, $a1
mul $s4, $s4, 4
add $s4, $s4, $s1
lw $t0, 0($s3)		# tmp = A[i]
lw $t3, 0($s4)		# A[i] = A[j]
sw $t3, 0($s3)
sw $t0, 0($s4)		# A[j] = tmp
jr $ra
	
